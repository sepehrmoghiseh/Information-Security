import socket
import json
import psutil
import platform
from datetime import datetime

from sock_helper import send_msg, recv_msg


HOSTNAME = 'localhost'
PORTNUMBER = 5000


def get_size(bytes, suffix="B"):
    """
    Scale bytes to its proper format
    e.g:
        1253656 => '1.20MB'
        1253656678 => '1.17GB'
    """
    factor = 1024
    for unit in ["", "K", "M", "G", "T", "P"]:
        if bytes < factor:
            return f"{bytes:.2f}{unit}{suffix}"
        bytes /= factor


def get_host_data():
    data = {}
    # System information
    uname = platform.uname()
    data["System"] = {}
    data["System"]["System"] = uname.system
    data["System"]["Host Name"] = uname.node
    data["System"]["Release"] = uname.release
    data["System"]["Version"] = uname.version
    data["System"]["Machine"] = uname.machine
    data["System"]["Processor"] = uname.processor
    # Boot Time
    boot_time_timestamp = psutil.boot_time()
    bt = datetime.fromtimestamp(boot_time_timestamp)
    data["System"]["Boot Time"] = "{}/{}/{} {}:{}:{}".format(
        bt.year, bt.month, bt.day, bt.hour, bt.minute, bt.second)

    # CPU information
    data["CPU"] = {}
    data["CPU"]["Physical cores"] = psutil.cpu_count(logical=False)
    data["CPU"]["Total cores"] = psutil.cpu_count(logical=True)

    # Memory information
    svmem = psutil.virtual_memory()
    data["Memory"] = {}
    data["Memory"]["Total"] = get_size(svmem.total)
    data["Memory"]["Available"] = get_size(svmem.available)
    data["Memory"]["Used"] = get_size(svmem.used)
    data["Memory"]["Percentage"] = f"{svmem.percent}%"

    # Swap memory information
    swap = psutil.swap_memory()
    data["Swap"] = {}
    data["Swap"]["Total"] = get_size(swap.total)
    data["Swap"]["Free"] = get_size(swap.free)
    data["Swap"]["Used"] = get_size(swap.used)
    data["Swap"]["Percentage"] = f"{swap.percent}%"

    # Network information
    data["Network"] = {}
    if_addrs = psutil.net_if_addrs()
    for interface_name, interface_addresses in if_addrs.items():
        for address in interface_addresses:
            if str(address.family) == 'AddressFamily.AF_INET':
                data["Network"][interface_name] = {}
                data["Network"][interface_name]["IP"] = address.address
                data["Network"][interface_name]["Netmask"] = address.netmask
                data["Network"][interface_name]["Broadcast IP"] = address.broadcast

    return json.dumps(data)


def handle_network(sock):
    while True:
        msg = recv_msg(sock).decode('utf-8')
        if msg == 'sysinfo':
            send_msg(sock, get_host_data().encode('utf-8'))


if __name__ == '__main__':
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    sock.connect((HOSTNAME, PORTNUMBER))
    print(f"Connected to {HOSTNAME} on port {PORTNUMBER}")

    handle_network(sock)

    sock.close()
